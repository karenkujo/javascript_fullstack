{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useEffect, useState } from 'react';\n\nclass MyCount extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(\"span\", null, this.state.count);\n  }\n\n}\n\nfunction MyCountFunc() {\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return __jsx(\"span\", null, state.count);\n}\n\nexport default MyCount;","map":{"version":3,"sources":["D:/javascript_fullstack/react-v16/next/nextjs-github/pages/test/b.js"],"names":["React","Component","useEffect","useState","MyCount","count","componentDidMount","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","MyCountFunc","setCount","c"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;;AAAA,mCACtB;AACNI,MAAAA,KAAK,EAAE;AADD,KADsB;AAAA;;AAK9BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAc;AACZJ,QAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KAAX,GAAmB;AADd,OAAd;AAGD,KAJ0B,EAIxB,IAJwB,CAA3B;AAKD;;AAEDM,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKJ,QAAT,EAAmB;AACjBK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;AACF;;AAEDM,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAO,KAAKH,KAAL,CAAWL,KAAlB,CAAP;AACD;;AArB6B;;AAwBhC,SAASS,WAAT,GAAuB;AACrB,QAAM;AAAA,OAACT,KAAD;AAAA,OAAQU;AAAR,MAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCO,MAAAA,QAAQ,CAACC,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAR;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMJ,aAAa,CAACL,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT;AAMA,SAAO,oBAAOG,KAAK,CAACL,KAAb,CAAP;AACD;;AAED,eAAeD,OAAf","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\n\r\nclass MyCount extends Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({\r\n        count: this.state.count + 1\r\n      })\r\n    }, 1000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <span>{this.state.count}</span>\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(c => c + 1)\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n  return <span>{state.count}</span>\r\n}\r\n\r\nexport default MyCount;"]},"metadata":{},"sourceType":"module"}