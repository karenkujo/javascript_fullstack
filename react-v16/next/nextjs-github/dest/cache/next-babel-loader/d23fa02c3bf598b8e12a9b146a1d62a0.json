{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useEffect, useState } from 'react';\n\nvar MyCount = /*#__PURE__*/function (_Component) {\n  _inherits(MyCount, _Component);\n\n  var _super = _createSuper(MyCount);\n\n  function MyCount() {\n    var _this;\n\n    _classCallCheck(this, MyCount);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      count: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(MyCount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        _this2.setState({\n          count: _this2.state.count + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"span\", null, this.state.count);\n    }\n  }]);\n\n  return MyCount;\n}(Component);\n\nfunction MyCountFunc() {\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      setCount(count + 1);\n    }, 1000);\n  });\n  return __jsx(\"span\", null, state.count);\n}\n\nexport default MyCount;","map":{"version":3,"sources":["D:/javascript_fullstack/react-v16/next/nextjs-github/pages/test/b.js"],"names":["React","Component","useEffect","useState","MyCount","count","interval","setInterval","setState","state","clearInterval","MyCountFunc","setCount"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;;IAEMC,O;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;;wCAIY;AAAA;;AAClB,WAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAChC,QAAA,MAAI,CAACC,QAAL,CAAc;AACZH,UAAAA,KAAK,EAAE,MAAI,CAACI,KAAL,CAAWJ,KAAX,GAAmB;AADd,SAAd;AAGD,OAJ0B,EAIxB,IAJwB,CAA3B;AAKD;;;2CAEsB;AACrB,UAAI,KAAKC,QAAT,EAAmB;AACjBI,QAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACD;AACF;;;6BAEQ;AACP,aAAO,oBAAO,KAAKG,KAAL,CAAWJ,KAAlB,CAAP;AACD;;;;EArBmBJ,S;;AAwBtB,SAASU,WAAT,GAAuB;AAAA,kBACKR,QAAQ,CAAC,CAAD,CADb;AAAA,MACdE,KADc;AAAA,MACPO,QADO;;AAGrBV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMI,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjCK,MAAAA,QAAQ,CAACP,KAAK,GAAG,CAAT,CAAR;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGD,GAJQ,CAAT;AAKA,SAAO,oBAAOI,KAAK,CAACJ,KAAb,CAAP;AACD;;AAED,eAAeD,OAAf","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\n\r\nclass MyCount extends Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({\r\n        count: this.state.count + 1\r\n      })\r\n    }, 1000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <span>{this.state.count}</span>\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(count + 1)\r\n    }, 1000)\r\n  })\r\n  return <span>{state.count}</span>\r\n}\r\n\r\nexport default MyCount;"]},"metadata":{},"sourceType":"module"}